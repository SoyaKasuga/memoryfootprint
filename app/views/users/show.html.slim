.container.mt
  .row.user-box
    .col-md-4.user-info
      -if @user.picture?
        = image_tag @user.picture.url, size: "200x200" ,class:"image rounded-circle"
      -else
        = image_tag "walking.png", size: "200x200" , class:"image default-icon rounded-circle"
    .col-md-8.user-info-right
      a.name = @user.name
      - if current_user.present? && current_user.admin?
        .delete-user
          = link_to @user, method: :delete ,data: {confirm: "削除してよろしいですか？"} do
            | 削除
      = render 'shared/stats'
      .description-box
        -if @user.introduction?
          h6 = @user.introduction
        -else
          h6 まだ自己紹介文がありません...
    .edit-or-follow
      - if current_user.present? && current_user.id == @user.id
        .btn.btn-outline-dark type="button" = link_to edit_user_path(@user)
          | 編集する
          
      - elsif logged_in?
        = render 'follow_form'
      
  .index-box
    ol.tab-group
      li.tab.tab-A.is-active 地図
      li.tab.tab-B 投稿
      li.tab.tab-C いいね！
    .panel-group 
      .panel.tab-A.is-show
        .user-map
          
        #map
      .panel.tab-B
        - if @user.microposts.any?
          h3
            | 投稿一覧 (#{@user.microposts.count})
        - else
          h3
            | 投稿はまだありません
        
        - if current_user.present? && current_user.id == @user.id
          .btn.btn-outline-dark type="button" = link_to '/microposts/new'
            | 投稿する

        ol.microposts
            = render @microposts
            = will_paginate @microposts, previous_label: '<', next_label: '>', inner_window: 1
      .panel.tab-C
        -if @like_microposts.any?
          h3
            | いいね！した投稿
        -else
          h3.noiine
            | いいね！した投稿はまだありません
        
        ol.microposts
          = render partial: 'microposts/micropost', collection: @like_microposts

      
            
javascript:
    handler = Gmaps.build('Google');
    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
      markers = handler.addMarkers(#{raw @hash.to_json});
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
    });